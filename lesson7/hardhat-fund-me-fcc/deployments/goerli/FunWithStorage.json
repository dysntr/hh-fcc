{
  "address": "0xa187605A3FA9B15Cae682A6aD4Af211FcdA097c8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "doStuff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x004e35d1ad90a945c3d494959b2455a9d8a4d64a9ccdc92f932adafbe768cb03",
  "receipt": {
    "to": null,
    "from": "0x58654a9D0cF81Cd497299636dF92f12820083465",
    "contractAddress": "0xa187605A3FA9B15Cae682A6aD4Af211FcdA097c8",
    "transactionIndex": 30,
    "gasUsed": "347661",
    "logsBloom": "0x
    "blockHash": "0x5b1dd7404593a8c8d48fd76b23d88e29554b507e6ab2cb14ce056821da6fd359",
    "transactionHash": "0x004e35d1ad90a945c3d494959b2455a9d8a4d64a9ccdc92f932adafbe768cb03",
    "logs": [],
    "blockNumber": 7680863,
    "cumulativeGasUsed": "14313941",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7774452ac44eb1ceb86ecae2db4ad698",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"doStuff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exampleContracts/FunWithStorage.sol\":\"FunWithStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/exampleContracts/FunWithStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\ncontract FunWithStorage {\\n    uint256 favoriteNumber; // Stored at slot 0\\n    bool someBool; // Stored at slot 1\\n    uint256[] myArray; /* Array Length Stored at slot 2,\\n    but the objects will be the keccak256(2), since 2 is the storage slot of the array */\\n    mapping(uint256 => bool) myMap; /* An empty slot is held at slot 3\\n    and the elements will be stored at keccak256(h(k) . p)\\n  \\n\\n    p: The storage slot (aka, 3)\\n    k: The key in hex\\n    h: Some function based on the type. For uint256, it just pads the hex\\n    */\\n    bytes a;\\n    string str = \\\"test\\\";\\n    uint256 constant NOT_IN_STORAGE = 123;\\n    uint256 immutable i_not_in_storage;\\n\\n    constructor() {\\n        favoriteNumber = 25; // See stored spot above // SSTORE\\n        a = \\\"0x8a3a55f92983e8de17d9fad85c3e5b2d7e7b7090f58520b220a38e079bbaa7f5\\\";\\n\\n        someBool = true; // See stored spot above // SSTORE\\n        myArray.push(222); // SSTORE\\n        myMap[0] = true; // SSTORE\\n        i_not_in_storage = 123;\\n    }\\n\\n    function doStuff() public {\\n        uint256 newVar = favoriteNumber + 1; // SLOAD\\n        bool otherVar = someBool; // SLOAD\\n        // ^^ memory variables\\n    }\\n}\\n\",\"keccak256\":\"0xc6c469141432f6c453a304a503caec5a56eec53b997e22cd90ea40f1bbb9d0a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526040518060400160405280600481526020017f74657374000000000000000000000000000000000000000000000000000000008152506005908051906020019061004f929190610112565b5034801561005c57600080fd5b5060196000819055506040518060800160405280604281526020016103d06042913960049080519060200190610093929190610198565b5060018060006101000a81548160ff021916908315150217905550600260de908060018154018082558091505060019003906000526020600020016000909190919091505560016003600080815260200190815260200160002060006101000a81548160ff021916908315150217905550607b6080818152505061029c565b82805461011e9061026a565b90600052602060002090601f0160209004810192826101405760008555610187565b82601f1061015957805160ff1916838001178555610187565b82800160010185558215610187579182015b8281111561018657825182559160200191906001019061016b565b5b509050610194919061021e565b5090565b8280546101a49061026a565b90600052602060002090601f0160209004810192826101c6576000855561020d565b82601f106101df57805160ff191683800117855561020d565b8280016001018555821561020d579182015b8281111561020c5782518255916020019190600101906101f1565b5b50905061021a919061021e565b5090565b5b8082111561023757600081600090555060010161021f565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061028257607f821691505b602082108114156102965761029561023b565b5b50919050565b60805161011c6102b46000396000505061011c6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063874f33a114602d575b600080fd5b60336035565b005b60006001600054604491906097565b90506000600160009054906101000a900460ff1690505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060a082605e565b915060a983605e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111560db5760da6068565b5b82820190509291505056fea2646970667358221220f1d64e048bc80e3a119b5be3a7b007bb08c31b915506d54243c7b4a91522a3c064736f6c63430008080033307838613361353566393239383365386465313764396661643835633365356232643765376237303930663538353230623232306133386530373962626161376635",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063874f33a114602d575b600080fd5b60336035565b005b60006001600054604491906097565b90506000600160009054906101000a900460ff1690505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060a082605e565b915060a983605e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111560db5760da6068565b5b82820190509291505056fea2646970667358221220f1d64e048bc80e3a119b5be3a7b007bb08c31b915506d54243c7b4a91522a3c064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2,
        "contract": "contracts/exampleContracts/FunWithStorage.sol:FunWithStorage",
        "label": "favoriteNumber",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4,
        "contract": "contracts/exampleContracts/FunWithStorage.sol:FunWithStorage",
        "label": "someBool",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/exampleContracts/FunWithStorage.sol:FunWithStorage",
        "label": "myArray",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/exampleContracts/FunWithStorage.sol:FunWithStorage",
        "label": "myMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 13,
        "contract": "contracts/exampleContracts/FunWithStorage.sol:FunWithStorage",
        "label": "a",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 16,
        "contract": "contracts/exampleContracts/FunWithStorage.sol:FunWithStorage",
        "label": "str",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}